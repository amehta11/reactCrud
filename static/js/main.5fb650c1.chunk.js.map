{"version":3,"sources":["fakeData.js","components/ActionsCell.jsx","components/Helpers/Validator.js","components/FormProvider.js","components/HighlightCell.jsx","components/AddnewForm.js","App.js","serviceWorker.js","store.js","index.js"],"names":["fakeData","len","arr","i","push","id","name","faker","findName","email","internet","phone","phoneNumber","editModes","view","props","Fragment","onClick","onEdit","className","src","alt","onDelete","edit","onCancel","type","ActionsCell","columnProps","rest","mode","actions","Buttons","index","validate","values","errors","trim","test","reduxForm","children","style","backgroundColor","color","HighlightCell","column","value","item","filtered","find","x","match","_match","toLowerCase","parts","length","split","RegExp","escapeRegExp","map","part","key","matchHighlight","AddnewForm","input","meta","touched","error","custom","hasError","undefined","fluid","class","handleSubmit","this","onSubmit","Field","component","Input","placeholder","React","Component","form","onSubmitSuccess","result","dispatch","reset","App","state","data","editing","displaySuccess","getActionProps","gridState","rowProps","original","setState","filter","_r","editableComponent","editableColumnProps","Cell","fieldProps","columns","Header","accessor","filterable","sortable","maxWidth","getProps","indexOf","set","handleNewEntry","setTimeout","bind","display","FormProvider","initialValues","enableReinitialize","formProps","showPagination","pageSize","defaultSorted","asce","Boolean","window","location","hostname","rootReducer","combineReducers","createStore","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fb650c1.chunk.js","sourcesContent":["import faker from 'faker'\n\n\nexport default function fakeData(len) {\n    const arr = [];\n    for (let i = 0; i < len; i++) {\n        arr.push({\n            id: i,\n            name: faker.name.findName(),\n            email: faker.internet.email(),\n            phone: faker.phone.phoneNumber('0#########')\n        })\n    }\n    return arr;\n}","import React from \"react\";\n\nconst editModes = {\n  view: props => (\n    <React.Fragment>\n      <button onClick={props.onEdit} className=\"actionButton\">\n        <img src=\"icons8-edit-30.png\" alt=\"submit\" />\n      </button>\n      <button onClick={props.onDelete} className=\"actionButton\">\n        <img src=\"icons8-remove-30.png\" alt=\"submit\" />\n      </button>\n    </React.Fragment>\n  ),\n  edit: props => (\n    <React.Fragment>\n      <div className=\"editAction\">\n        <div className=\"cancleAction\">\n          <button onClick={props.onCancel} className=\"cancelButton\">\n            Cancel\n          </button>\n        </div>\n        <div className=\"saveAction\">\n          <button type=\"submit\" className=\"saveButton\">\n            Save\n        </button>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n};\n\nexport default function ActionsCell(props) {\n  const {\n    mode,\n    actions: { onEdit, onCancel, onDelete }\n  } = props.columnProps.rest;\n  const Buttons = editModes[mode];\n  return <Buttons onEdit={() => onEdit(props.index)} onCancel={onCancel} onDelete={onDelete} />;\n}","// Helper function to validate input params\n\nexport default function validate (values) {\n    const { name, email, phone } = values;\n    const errors = {};\n    if (!name || name.trim() === '') {\n      errors.name = \"Full name is a required.\";\n    }\n\n    /* \n     * email validation regex \n     * example : Daniela_Hammes@yahoo.com \n     */\n    if (!email || email.trim() === '') {\n      errors.email = \"Email address is a required.\";\n    } else if (!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(email)) {\n        errors.email = \"Invalid email address.\";\n    }\n \n    /*\n     * Phone validation regex,  \n     * Allowing finnish phone number starting with 0 and 9 digits afterwards\n     * example : 0456789078 \n     */\n    if (!phone || phone.trim() === '') {\n      errors.phone = \"Phone number is a required.\";\n    }else if (!/^0{1}[0-9]{9}$/.test(phone)) {\n      errors.phone = \"Invalid finnish phone number.\";\n    }\n\n    return errors;\n}\n","import { reduxForm } from \"redux-form\";\nimport validate from \"./Helpers/Validator\";\n\nconst toRenderProp = ({ children, ...rest }) => children(rest);\n\nexport default reduxForm({\n    validate\n})(toRenderProp);\n","import React from \"react\";\nimport escapeRegExp from \"lodash/escapeRegExp\";\n\nconst style = {\n  backgroundColor: \"#FFFF88\",\n  color: \"#FF0000\"\n};\n\nexport function matchHighlight(match, value) {\n  const _match = match.toLowerCase();\n\n  const parts = match.length\n    ? value.split(new RegExp(`(${escapeRegExp(match)})`, \"ig\"))\n    : [value];\n\n  return (\n    <React.Fragment>\n      {parts.map(\n        (part, index) =>\n          part && part.toLowerCase() === _match ? (\n            <span key={index} style={style}>\n              {part}\n            </span>\n          ) : (\n            part\n          )\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default function HighlightCell(props) {\n  const { column, columnProps, value } = props;\n  const item =\n    columnProps.rest.filtered &&\n    columnProps.rest.filtered.find(x => x.id === column.id);\n\n  const match = (item && item.value) || \"\";\n  return matchHighlight(match, value);\n}\n","import React from 'react'\nimport { reset, Field, reduxForm } from 'redux-form'\nimport { Input } from 'semantic-ui-react';\nimport validate from \"./Helpers/Validator\";\n\n\nclass AddnewForm extends React.Component {\n\n  Input({ input, meta: { touched, error }, ...custom }) {\n    const hasError = touched && error !== undefined;\n    return (\n      <React.Fragment>\n        <Input\n          error={hasError}\n          fluid\n          {...input}\n          {...custom} />\n        {hasError && <div class=\"error-message\">{error}</div>}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <form onSubmit={handleSubmit}>\n        <div className=\"addForm\">\n          <div className=\"inputFields\">\n            <div className=\"chield\">\n              <Field name=\"name\" component={this.Input} placeholder=\"Full name\" />\n            </div>\n            <div className=\"chield\">\n              <Field name=\"email\" component={this.Input} placeholder=\"E-mail address\" />\n            </div>\n            <div className=\"chield\">\n              <Field name=\"phone\" component={this.Input} placeholder=\"Phone number\" />\n            </div>\n          </div>\n          <div className=\"submitButton\">\n            <button type=\"submit\">Add new</button>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\n// clear table after successful added\nconst afterSubmit = (result, dispatch) => dispatch(reset('contact'));\n\nexport default reduxForm({\n  // a unique name for the form\n  form: 'contact',\n  validate,\n  onSubmitSuccess: afterSubmit,\n})(AddnewForm)","import React from 'react';\nimport './App.css';\nimport set from \"lodash/fp/set\";\nimport { Field } from \"redux-form\";\nimport Table from \"react-table\";\nimport fakeData from './fakeData';\nimport ActionsCell from \"./components/ActionsCell\";\nimport FormProvider from \"./components/FormProvider\";\nimport HighlightCell from \"./components/HighlightCell\";\nimport AddnewForm from \"./components/AddnewForm\";\n\nexport default class App extends React.Component {\n\n  state = { \n    data: fakeData(20), // loading 20 rendom data\n    editing: null, // initial edit value\n    displaySuccess: 'none'  // Success tost bydefualt none\n  };\n\n  // Define Actions\n  getActionProps = (gridState, rowProps) =>\n    (rowProps && {\n      mode: this.state.editing === rowProps.original ? \"edit\" : \"view\",\n      actions: {\n        onEdit: () => this.setState({ editing: rowProps.original }),\n        onCancel: () => this.setState({ editing: null }),\n        onDelete: () => {\n          this.setState({data: this.state.data.filter(function(_r, index) { \n             return index !== rowProps.index \n           })});\n        }\n      }\n    }) ||\n    {};\n\n\n    // custom component\n    editableComponent = ({ input,meta: { touched, error }, editing, value, ...rest}) => {\n      const Component = editing ? \"input\" : \"span\";\n      const hasError = touched && error !== undefined;\n      const children =\n        (!editing && <HighlightCell value={value} {...rest} />) || undefined;\n      return(\n        <React.Fragment>\n            <Component error={hasError} {...input} {...rest} children={children} /> \n          {hasError && editing && <div class=\"error-message\">{error}</div>}\n        </React.Fragment>\n      );\n    };\n\n    // Defining Editable props\n    editableColumnProps = {\n      Cell: props => {\n        const editing = this.state.editing === props.original;\n        const fieldProps = {\n          component: this.editableComponent,\n          editing,\n          props\n        };\n       return <Field name={props.column.id} {...fieldProps}/>;\n      }\n    };\n\n  columns =\n    [\n      { Header: \"Name\", accessor: \"name\", ...this.editableColumnProps, filterable: false},\n      { Header: \"E-mail address\", accessor: \"email\",...this.editableColumnProps, filterable: false},\n      { Header: \"Phone number\", accessor: \"phone\", ...this.editableColumnProps, filterable: false},\n      {\n        Header: \"\", sortable: false,\n        maxWidth: 200,\n        filterable: false,\n        getProps: this.getActionProps,\n        Cell: ActionsCell\n      }\n    ];\n\n  // handle Edition \n  handleSubmit = values => {\n    this.setState(state => {\n      const index = this.state.data.indexOf(this.state.editing);\n      return {\n        data: set(`[${index}]`, values, state.data)\n      };\n    });\n  };\n\n  // handle Addition\n  handleNewEntry =  values => {\n    const item = {\n      id: this.state.data.length + 1,\n      name: values.name,\n      email: values.email,\n      phone: values.phone\n    };\n    this.setState({\n      data: [...this.state.data, item],\n      displaySuccess: 'block'\n    })\n\n    setTimeout(function(){\n      this.setState({displaySuccess: 'none'});\n    }.bind(this), 1000)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <div className=\"logo\">\n            <div className=\"logoBox\">\n              <div className=\"blankSquare\"></div>\n              <div className=\"companyName\">Loard Software\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"manual-container\">\n          <div className=\"table-header\">List of participants</div>\n          <div className=\"successMessage\" style={{display: this.state.displaySuccess}}> Added successfully </div>\n          <div className=\"table-view-add\">  \n            <AddnewForm onSubmit={this.handleNewEntry}/>\n          </div>\n          <div className=\"table-view-List\">\n            <FormProvider\n              form=\"inline\"\n              onSubmit={this.handleSubmit}\n              onSubmitSuccess={() => this.setState({ editing: null })}\n              initialValues={this.state.editing}\n              enableReinitialize\n            >\n              {formProps => {\n                return (\n                  <form onSubmit={formProps.handleSubmit}>\n                    <Table\n                      columns={this.columns}\n                      data={this.state.data}\n                      showPagination={false}\n                      pageSize={this.state.data.length}\n                      defaultSorted={[\n                        {\n                          id: \"name\",\n                          asce: true\n                        }\n                      ]}\n                    />\n                  </form>\n                );\n              }}\n            </FormProvider>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport { reducer as form } from \"redux-form\";\n\nconst rootReducer = combineReducers({ form });\nexport default createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}